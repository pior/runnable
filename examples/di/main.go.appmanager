package main

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/pior/runnable"
	"go.uber.org/dig"
)

func main() {
	container := dig.New()

	container.Provide(func() runnable.AppManager {
		return runnable.Manager(nil)
	})

	container.Provide(func(app runnable.AppManager) *DB {
		db := &DB{}
		app.Add(db) // should be wrapped with a runnable.Closer()
		return db
	})

	container.Provide(func(app runnable.AppManager, db *DB) *JobQueue {
		q := NewJobQueue(db)
		app.Add(q, db)
		return q
	})

	container.Invoke(func(app runnable.AppManager, jobs *JobQueue, db *DB) {
		server := newServer(jobs, db)
		app.Add(runnable.HTTPServer(server), jobs, db)

		monitor := runnable.Restart(newTask(jobs))
		app.Add(monitor, jobs)

		runnable.Run(app.Build())
	})
}

func newServer(jobs *JobQueue, db *DB) *http.Server {
	return &http.Server{
		Addr: "localhost:8000",
		Handler: http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {
			jobs.Perform(r.URL.Path)
			db.Read()
			fmt.Fprintln(rw, "Job enqueued!")
		}),
	}
}

func newTask(jobs *JobQueue) runnable.Runnable {
	return runnable.Func(func(_ context.Context) error {
		http.Post("http://localhost:8000", "text/plain", nil)
		time.Sleep(time.Second * 2)
		fmt.Printf("Task executed: %d\n", jobs.Executed())
		return nil
	})
}
